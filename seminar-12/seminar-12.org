#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+LANG: ru
#+INCLUDE: "../common/org-header.org"
#+TITLE: Семинар 12: Архитектура

* Варианты
На этом семинаре вы можете делать одно из двух заданий.

Первый вариант это развитие принтера, который вы увидели на прошлом семинаре.
Добавьте туда:

- вычислитель, который умеет вычислять формулы. Сделайте его расширяемым, так же, как сделан принтер. Подсказка: в отличие от принтера, который не имеет состояния, для вычисления потребуется накапливать состояние, поэтому функции будут иметь больше аргументов, нежели принтеры для узлов.
- парсер, который сможет распознавать верные формулы из сложения, умножения, деления и вычитания. Не забудьте про скобки!


Второй вариант это реализация несложной структуры данных как абстрагированного модуля с непрозрачным типом. Ему посвящена эта заметка.
 
* Изначальный код

  У вас есть код внутри одной функции =main=, который реализует расширяемый массив (вектор).
  Изучите его.

  #+include: "bad.c" src c
   
  Расширяемый массив в отличие от обычного имеет нефиксированный размер, в конец такого массива можно добавлять элементы.
  Как это работает:
  - Мы выделяем память с запасом.
  - Мы храним два дополнительных числа: количество выделенных слотов под элементы и количество заполненных слотов в массиве.
  - Пока у нас хватает выделенных слотов, мы просто дописываем элементы в массив, увеличивая количество занятых слотов.
  - Если слотов перестало хватать, то увеличиваем количество слотов в 2 раза. Для этого используем =realloc= чтобы скопировать выделенную память в расширенный участок.

  *Вопрос* Прочитайте раздел =man malloc= про функцию =realloc=.
   
* Задание


  Ваша задача --- выделить из этого кода как минимум модуль с реализацией вектора, снабжённый заголовочным файлом.

  - Вектор должен быть реализован как [[https://stepik.org/lesson/408352/step/6][непрозрачная структура данных]].
  - Доступ к его элементам должен быть контролируем и осуществляться через getter и setter.
  - Постарайтесь максимально переиспользовать код и ничего не дублировать.
  - Вывод вектора реализуйте как отдельную функцию, которая принимает =FILE*=, в который нужно вывести его содержимое.
    Эту функцию можно также разбить на функцию =foreach= и принтер одного элемента.
  - Стремитесь сделать настолько маленькие функции, насколько возможно.

  В результате должна получиться программа из нескольких файлов, которая делает то же самое, но в которой =main= содержит только заполнение вектора числами и вызов функции, печатающей его в =stdout=.
   
  Прочитайте заметку [[[https://gitlab.se.ifmo.ru/c-language/main/-/wikis/%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D1%8F-%D0%BD%D0%B0%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC-%D0%BD%D0%B0-C][Правила хорошего стиля]]] --- ваш код должен им соответствовать.
  
